# -*- coding: utf-8 -*-
"""
Implementing a wrapper for a new engine SHARC:
https://sharc-md.org

Created on Thu Oct  1 10:24:54 2020

@author: Madlen Maria Reiner
"""

import logging # debugging etc.
logger = logging.getLogger(__name__)
import copy # shallow/deep copy operations

from mdtraj.formats import TRRTrajectoryFile
import mdtraj as md

import numpy as np
import os

from openpathsampling.engines import ExternalEngine
from openpathsampling.engines import features
from openpathsampling.engines.snapshot import BaseSnapshot, SnapshotDescriptor
from openpathsampling.engines.openmm.topology import MDTrajTopology
from openpathsampling.engines.external_snapshots import ExternalMDSnapshot

#from openpathsampling.engines import DynamicsEngine, SnapshotDescriptor
# DynamicsEngine in dynamics_engine.py -> wraps simulation tool
# SnapshotDescriptor in dynamics_engine.py -> Container for information about
# snapshots generated by an engine.

#from .snapshot import Snapshot

from openpathsampling.engines.external_engine import (
    _debug_open_files, close_file_descriptors
)


def snapshot_from_xyz(xyz_file):
    class xyzFileEngine(ExternalEngine):
        def __init__(self, xyz):
            traj = md.load(xyz, top='H2.pdb')
            self.topology = MDTrajTopology(traj.topology)
            n_atoms = self.topology.n_atoms
            n_spatial = self.topology.n_spatial
            descriptor = SnapshotDescriptor.construct(
                snapshot_class=ExternalMDSnapshot,
                snapshot_dimensions={'n_spatial': n_spatial,
                                     'n_atoms': n_atoms}
            )
            super(xyzFileEngine, self).__init__(options={},
                                                descriptor=descriptor,
                                                template=None)

        # read_frame_data = GromacsEngine.read_frame_data

        def read_frame_data(self, file_name, file_position):
            traj = md.load(file_name, top='H2.pdb')
            xyz = traj.xyz[0]
            vel = np.zeros(shape=xyz.shape)
            box = traj.unitcell_vectors[0]
            return (xyz, vel, box)

    template_engine = xyzFileEngine(xyz_file)
    snapshot = ExternalMDSnapshot(file_name=xyz_file,
                                  file_position=0,
                                  engine=template_engine)
    return snapshot


class SharcEngine(ExternalEngine):
    """
    Engine wrapper for SHARC.
    
    TODO: more information.
    """
    
    _default_options = {'n_steps_per_frame': 10, 'n_frames_max' : 5000}
    
    def __init__(self, topology, system, integrator, options=None):
        """
        Parameters
        ----------
        topology : TYPE
            DESCRIPTION.
        system : TYPE
            DESCRIPTION.
        integrator : TYPE
            DESCRIPTION.
        options : TYPE, optional
            DESCRIPTION. The default is None.

        Returns
        -------
        None.

        """
        template = snapshot_from_xyz(self.xyz)
        self.topology = template.topology
        descriptor = template.engine.descriptor
        # self.system = system
        # self.integrator = integrator
        # self.topology = topology
        # dimensions = {
        #     'n_atoms' : topology.n_atoms,
        #     'n_spatial' : topology.n_spatial
        # }
        # self._current_snapshot = None
        # self._current_momentum = None
        # self._current_configuration = None
        # self._current_box_vectors = None

        # self._simulation = None
    
    # @property
    # def mdtraj_topology(self):
    #     if self._mdtraj_topology:
    #         return self._mdtraj_topology
    #     return self.topology.mdtraj

    # @mdtraj_topology.setter
    # def mdtraj_topology(self, value):
    #     self._mdtraj_topology = value
    
    # @property
    # def current_snapshot(self):
    #     if self._current_snapshot is None:
    #         self._current_snapshot = self._build_current_snapshot
    #     return self._current_snapshot
        
    # def _changed(self):
    #     self._current_snapshot = None
        
    # @current_snapshot.setter
    # def current_snapshot(self, snapshot):
    #     self.check_snapshot_type(snapshot)
    #     if snapshot is not self._current_snapshot:
    #         # if snapshot coordinates is not None:
    #         self.simulation.context.setPositions(snapshot.coordinates)
    #         if snapshot.engine is self:
    #             # no need for copy if this snap is from this engine
    #             self._current_snapshot = snapshot
    #         else:
    #             self._current_snapshot = self._build_current_snapshot()
    
    def read_frame_from_file(self, file_name, frame_num):
        t = md.load('output.xyz', top='H2.pdb')
        print(t.n_atoms)
        print(t.xyz[0])
        return snapshot
    
    def write_frame_to_file(self, filename, snapshot, mode='w'):
        a=1
        
    def set_filenames(self, number):
        """
        Sets the file names for step number.

        Parameters
        ----------
        number : int
            number of the MC step (?)

        Returns
        -------
        None.

        """
        a=1
    
    def cleanup(self):
        #delete any unnecessary files etc.
        a=1
    
    def engine_command(self):
        cmd = 1
        return cmd